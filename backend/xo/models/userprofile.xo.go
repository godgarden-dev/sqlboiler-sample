// Package models contains the types for schema 'demo'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// UserProfile represents a row from 'demo.user_profiles'.
type UserProfile struct {
	UserID     int       `json:"user_id"`    // user_id
	Prefecture string    `json:"prefecture"` // prefecture
	Gender     string    `json:"gender"`     // gender
	CreatedAt  time.Time `json:"created_at"` // created_at
	UpdatedAt  time.Time `json:"updated_at"` // updated_at

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the UserProfile exists in the database.
func (up *UserProfile) Exists() bool {
	return up._exists
}

// Deleted provides information if the UserProfile has been deleted from the database.
func (up *UserProfile) Deleted() bool {
	return up._deleted
}

// Insert inserts the UserProfile to the database.
func (up *UserProfile) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if up._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO demo.user_profiles (` +
		`user_id, prefecture, gender, created_at, updated_at` +
		`) VALUES (` +
		`?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, up.UserID, up.Prefecture, up.Gender, up.CreatedAt, up.UpdatedAt)
	_, err = db.Exec(sqlstr, up.UserID, up.Prefecture, up.Gender, up.CreatedAt, up.UpdatedAt)
	if err != nil {
		return err
	}

	// set existence
	up._exists = true

	return nil
}

// Update updates the UserProfile in the database.
func (up *UserProfile) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if up._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE demo.user_profiles SET ` +
		`prefecture = ?, gender = ?, created_at = ?, updated_at = ?` +
		` WHERE user_id = ?`

	// run query
	XOLog(sqlstr, up.Prefecture, up.Gender, up.CreatedAt, up.UpdatedAt, up.UserID)
	_, err = db.Exec(sqlstr, up.Prefecture, up.Gender, up.CreatedAt, up.UpdatedAt, up.UserID)
	return err
}

// Save saves the UserProfile to the database.
func (up *UserProfile) Save(db XODB) error {
	if up.Exists() {
		return up.Update(db)
	}

	return up.Insert(db)
}

// Delete deletes the UserProfile from the database.
func (up *UserProfile) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !up._exists {
		return nil
	}

	// if deleted, bail
	if up._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM demo.user_profiles WHERE user_id = ?`

	// run query
	XOLog(sqlstr, up.UserID)
	_, err = db.Exec(sqlstr, up.UserID)
	if err != nil {
		return err
	}

	// set deleted
	up._deleted = true

	return nil
}

// User returns the User associated with the UserProfile's UserID (user_id).
//
// Generated from foreign key 'user_profiles_user'.
func (up *UserProfile) User(db XODB) (*User, error) {
	return UserByID(db, up.UserID)
}

// UserProfileByUserID retrieves a row from 'demo.user_profiles' as a UserProfile.
//
// Generated from index 'user_profiles_user_id_pkey'.
func UserProfileByUserID(db XODB, userID int) (*UserProfile, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`user_id, prefecture, gender, created_at, updated_at ` +
		`FROM demo.user_profiles ` +
		`WHERE user_id = ?`

	// run query
	XOLog(sqlstr, userID)
	up := UserProfile{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, userID).Scan(&up.UserID, &up.Prefecture, &up.Gender, &up.CreatedAt, &up.UpdatedAt)
	if err != nil {
		return nil, err
	}

	return &up, nil
}
